@@startuml diagramaClases
/'incompleto'/

 class Jugador {
     - puntos: int
     - cantidadDescartes: int
     - cantidadJugadas: int
     - mano: Mano
     - mazo: Mazo
     - cartasDescartadas: PilaDescarte
     - List<Carta> cartas
     - List<Activable> jokers
     - List<Activable> tarots
     - List<ActivableEnCarta> tarotsParaCarta
     + Jugador(mano: Mano)
     + seleccionarCarta(cartas: Poker): void
     + cancelarEleccion():void
     + descartarMano():void
     + jugarMano(): void
     + agregarCartas(List<Carta>): int
     + agregarCartasFaltantes(): void
     + agregarJoker(joker:Activable):void
     + eliminarJoker(joker:Activable):void
     + agregarTarot(tarot:Activable):void
     + eliminarTarot(tarot:Activable):void
     + agregarTarotParaCarta(tarot:ActivableEnCarta):void
     + eliminarTarotParaCarta(tarot:ActivableEnCarta):void
     + soyMayorA(puntosASuperar:int):void
     + quedanDescartes():boolean
     + quedanJugadas():boolean
     + actualizarCantidadDeManosYDescartes(manos:int, descartes:int):void
     + reiniciarPuntos():void
 }


 class Carta {
     - palo: Palo
     - figuta: Figura
     - nombre: String
     - puntaje: Puntaje
     - miAnteriorCartaEs(figuraActual: Figura): boolean
     - esMismaFiguraQue(figuraActual: Figura): boolean
     - miPaloEs(paloActual: Palo): boolean
     + Carta(palo: Palo, figura: Figura)
     + obtenerOrden(): int
     + laCartaSiguienteEs(siguienteCartaList: Poker): boolean
     + laCartaSiguienteMismoPalo(siguienteCartaList: Poker): boolean
     + tieneMismaFiguraQue(siguienteCartaList: Poker): boolean
     + esFiguraIgualA(figura: Figura): boolean
     + sumarPuntajeCon(otroPuntaje: Puntaje): void
     + getImage():Image
 }

abstract class Figura{
    - nombre: String
    +Figura (nombre: String)
    + {abstract} orden(): int
    + {abstract} asignarPuntaje(): Puntaje
    + {abstract} esIgualA(): Boolean
    + {abstract} miSiguienteFiguraEs(figura: Figura): Boolean
}

abstract class Palo{
    - nombre: String
    +Palo (nombre: String)
    + {abstract} somosMismoPalo(palo: Palo): boolean
}


 class Mano {
     - jugada: Jugada
     - ArrayList<Carta> cartas
     - ArrayList<Jugada> jugadasPosibles
     - puntajeTotal:Puntaje
     - determinarJugada(List<Carta>): Jugada
     + Mano()
     + reiniciarPuntaje():void
     + obtenerChips(): int
     + aumentarChips(incremento: Chip): void
     + cambiarChipPor(nuevoValor: int): void
     + agregarCarta(cartaCarta: Carta): void
     + sumarMultiplicador(Multiplicador incremento): void
     + multiplicarMultiplicador(multiplicador: Multiplicador): void
     + mejorarJugada(incrementador: int, multiplicador: Multiplicador, jugadaElegida String): void
     + validarNombreMano(manoAValidar: String): boolean
     + aumentarPuntos(puntos: int): void
     + vaciarMano(): void
     + calcularPuntaje(): int
     + cartasAcumuladas(List<Carta>)): List<Carta>
 }

  abstract class Jugada{
      +Jugada(chip: Chip, multiplicador: Multiplicador)
      {abstract} validarNombreJugada(manoAValidar: String): boolean
      {abstract} esJugadaValida(List<Carta>): boolean
      {abstract} cartasJugadas(List<Carta>): List<Carta>
      -ordenarCartas(List<Carta>): List<Carta>
      +mejorar(incrementador: int, multiplicador: Multiplicador): void
      +obtenerMultiplicador(): int
      + calcularPuntaje(puntajeList Puntaje): int
  }

 abstract class Joker implements Activable{
    -nombre: String
    -descripcion: String
    -activacion: String
    -efecto: Efecto
    -incrementador: int
    -multiplicador: Multiplicador
    +Joker(nombre: String, descripcion: String, activacion: String, incrementador: int, multiplicador: Multiplicador,efecto: Efecto)
    +{abstract}activar(mano: Mano, contexto: String): void
 }
 class AlPuntaje extends Joker{
         +AlPuntaje(String nombre, String descripcion, int incrementador, Multiplicador multiplicador, String activacion, Efecto efecto)
      }

      class Descarte extends Joker {
          +Descarte(String nombre, String descripcion, int puntos, Multiplicador multiplicador, Efecto efecto)
      }

      class unoEn extends Joker{
         +UnoEn(String nombre, String descripcion, int puntos, Multiplicador multiplicador, Efecto efecto)
      }

      class PorJugada extends Joker{
         +PorJugada(String nombre, String descripcion, int puntos, Multiplicador multiplicador, String jugada, Efecto efecto)
      }

      class Combinacion implements Activable {
          -String nombre
          -String descripcion
          -ArrayList<Joker> subcomodines

          +Combinacion(String nombre, String descripcion, ArrayList<Activable> subcomodines)
          +void activar(Mano mano, String contexto)

      }

 abstract class Tarot implements Activable{
    -nombre: String
    -descripcion: String
    -incrementador: int
    -multiplicador: Multiplicador
    -efecto: Efecto
    +Tarot(nombre: String, descripcion: String, incrementador: int, multiplicador: Multiplicador, efecto: Efecto)
    +{abstract}activar(mano: Mano, contexto: String): void
 }

 interface Activable{
    +{abstract}activar(mano: Mano, contexto: String): void
 }

abstract class Efecto{
{abstract} activar(incrementador: int, multiplicador: Multiplicador, mano: Mano): void
}

class PilaDescarte {
    - manosDescartadas: List<Carta>
    - cantidadManosDescartadas: int
    + PilaDescarte()
    + descartarMano(mano: Mano): void
    + reinsertarEnMazo(Mazo: mazo): void
 }

class Mazo{
    -List<Carta> mazoDeCartas
    +Mazo()
    +getCartasDisponibles(): int
    +cartaAleatoria(): Carta
    +repartirCartas(jugador: Jugador): void
    +reinsertarCartas(List<Carta>): void
}

class Ronda{
    -numero: int
    -manos: int
    -descartes: int
    -puntajeASuperar: int
    -tienda: Tienda
    +Ronda(numero: int, manos: int, descartes: int, puntajeASuperar: int, tienda: Tienda)
    +comenzar(jugador: Jugador): void
}

class Juego{
    -jugador: Jugador
    -nroRonda: int
    -rondas: List<Ronda>
    -rondaActual: Ronda
    +Juego()
    +avanzarRonda():void
}

class Tienda{
    -List<Activable> activables
    -carta: Carta
    +Tienda(List<Activable> activables, carta: Carta)
    +venderCarta():void
}
interface ActivableEnCarta{
+activar(Carta carta, String contexto)
}

abstract class TarotEnCarta implements ActivableEnCarta{
-String nombre
-String descripcion
+int puntos
+Multiplicador multiplicador
+EfectoEnCarta efecto

+TarotEnCarta(String nombre, String descripcion, int incrementador, Multiplicador multiplicador, EfectoEnCarta efecto)
+activar(Carta carta, String contexto)
}

class MejoraCarta extends TarotEnCarta{
+MejoraCarta(String nombre, String descripcion, int puntaje, Multiplicador multiplicador, EfectoEnCarta efecto)
+activar(Carta carta, String contexto)
}

interface EfectoEnCarta{
+activar(int incrementador, Multiplicador multiplicador, Carta carta)
}

class MejorarCarta implements EfectoEnCarta{
activar(int incrementador, Multiplicador multiplicador, Carta carta)
}

class Corazon extends Palo{}
class Diamante extends Palo{}
class Trebol extends Palo{}
class Pica extends Palo{}
class As extends Figura{}
class Rey extends Figura{}
class Reina extends Figura{}
class Jota extends Figura{}
class Diez extends Figura{}
class Nueve extends Figura{}
class Ocho extends Figura{}
class Siete extends Figura{}
class Seis extends Figura{}
class Cinco extends Figura{}
class Cuatro extends Figura{}
class Tres extends Figura{}
class Dos extends Figura{}

TarotEnCarta -> EfectoEnCarta
Juego *--"8 " Ronda
Ronda *-- Tienda
PilaDescarte --* Jugador
Jugador *-- Mano
Mano -->"0..5   " Carta
Mano o--"10" Jugada
Jugador --->"0..8  " Carta
PilaDescarte ..> Mano
Mazo <.. PilaDescarte
Mazo ...> Jugador
Mazo -->" 0..*    " Carta
Carta --> Palo
Carta --> Figura
Mazo --* Jugador
Jugador -->"0..5" Joker
Jugador -->"0..2 " Tarot
Efecto <|. Tarot
Efecto <|. Joker
Tienda-->"3" Activable
Tienda--> ActivableEnCarta
Carta <- Tienda
Juego --> Jugador
PilaDescarte -->"0..* " Carta
Jugador <... Ronda
 @enduml