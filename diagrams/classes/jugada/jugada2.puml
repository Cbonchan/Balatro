@startuml diagramaClases


class Jugador {
    - puntaje: int

    + Jugador(mano: Mano)
    + seleccionarCarta(cartas: Poker): void
    + jugar(tablero: Tablero): void
    + agregarCartas(List<Poker>): int
    + asignarPuntaje(puntajeEntrante: int): void
    + deshacerEleccion(): void


}

class Mano {
    - determinarJugada(List<Poker>): Jugada
    + agregarCarta(cartaPoker: Poker): void
    + vaciarMano(): void
    + calcularPuntaje(): int
}

class Puntaje{
    + Puntaje(chip: Chip, multiplicador: Multiplicador)
    + Puntaje(chip: Chip)
    + aumentarValorChip(otroChip: Chip): Chip
    + aumentarValorMultiplicador(otroMultiplicador: Multiplicador): Multiplicador
    + sumarNuevosChips(otroPuntaje: Puntaje): void
    + sumarNuevoMultiplicador(otroPuntaje: Puntaje): void
    + calcularPuntaje(): void


}

class Multiplicador{
    - valor: int
    + Multiplicador(valor: int)
    + sumar(otroMultiplicador: Multiplicador): Multiplicador
    + multiplicarCon(chip: Chip): int
    + valorNumerico(): int
}

class Chip{
    - valor: int
    + Chip(valor: int)
    + sumar(otroChip: Chip): Chip
    + multiplicarCon(multiplicador int): int
    + valorNumerico(): int
}

class Poker {
    - palo: Palo
    - figuta: Figura
    - miAnteriorCartaEs(figuraActual: Figura): boolean
    - esMismaFiguraQue(figuraActual: Figura): boolean
    - miPaloEs(paloActual: Palo): boolean
    + á¹”oker(palo: Palo, figura: Figura)
    + obtenerOrden(): int
    + laCartaSiguienteEs(siguienteCartaList: Poker): boolean
    + laCartaSiguienteMismoPalo(siguienteCartaList: Poker): boolean
    + tieneMismaFiguraQue(siguienteCartaList: Poker): boolean
    + esFiguraIgualA(figura: Figura): boolean
    + sumarPuntajeCon(otroPuntaje: Puntaje): void
}





abstract class Jugada{
    +Jugada(chip: Chip, multiplicador: Multiplicador)
    {abstract} esJugadaValida(List<Poker>): boolean
    {abstract} cartasJugadas(List<Poker>): List<Poker>
    + ordenarCartas(List<Poker>): List<Poker>
    + calcularPuntaje(puntajeList Puntaje): int
}



class RoyalFlush extends Jugada{

    + esJugadaValida(List< Poker>): boolean
    + cartasJugadas(List<Poker>): List<Poker>
}

class StraightFlush extends Jugada{

    + esJugadaValida(List< Poker>): boolean
    + cartasJugadas(List<Poker>): List<Poker>
}

class FourOfAKind extends Jugada{

    + esJugadaValida(List< Poker>): boolean
    + cartasJugadas(List<Poker>): List<Poker>
}

class FullHouse extends Jugada{

    + esJugadaValida(List< Poker>): boolean
    + cartasJugadas(List<Poker>): List<Poker>

}

class Flush extends Jugada{
    + esJugadaValida(List< Poker>): boolean
    + cartasJugadas(List<Poker>): List<Poker>
}

class Straight extends Jugada{
    + esJugadaValida(List< Poker>): boolean
    + cartasJugadas(List<Poker>): List<Poker>
}

class ThreeOfAKind extends Jugada{
    + esJugadaValida(List< Poker>): boolean
    + cartasJugadas(List<Poker>): List<Poker>
}

class TwoPair extends Jugada{

    + esJugadaValida(List< Poker>): boolean
    + cartasJugadas(List<Poker>): List<Poker>
}

class Pair extends Jugada{
    + esJugadaValida(List< Poker>): boolean
    + cartasJugadas(List<Poker>): List<Poker>
}

class HighCard extends Jugada{
    + esJugadaValida(List< Poker>): boolean
    + cartasJugadas(List<Poker>): List<Poker>
}


class Tablero {
    + jugarMano(mano: Mano): int
}


Jugador -right-> "8 " Poker
Jugador -left-> Mano
Jugador ..> Tablero

Mano o-- Poker
Mano *-up- Puntaje
Mano <.. Tablero
Mano o-left- Jugada

Puntaje *-- Chip
Puntaje *-- Multiplicador

Jugada o-left- Puntaje

Poker o-- Puntaje

FourOfAKind --right> TwoPair
FullHouse -left-> Pair
FullHouse -right-> ThreeOfAKind
RoyalFlush -right-> Flush
StraightFlush -right-> Straight
StraightFlush -left-> Flush
TwoPair -left-> Pair
@enduml